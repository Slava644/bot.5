import json
import urllib.request
import urllib.parse
import time
import os
import random
import ssl

# üîê –í–∞—à—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:
TOKEN = '7099223221:AAHOMnklX4l1o5KXC-aezY4Z8e3dAEJreqU'
ADMIN_ID = 1496554517
URL = f'https://api.telegram.org/bot{TOKEN}/'
DATA_FILE = 'data.json'

context = ssl.create_default_context()

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
def load_data():
    if not os.path.exists(DATA_FILE):
        return {}
    with open(DATA_FILE, 'r', encoding='utf-8') as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

# –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
def send_message(chat_id, text, keyboard=None, inline_keyboard=None):
    payload = {
        'chat_id': chat_id,
        'text': text,
    }

    if keyboard:
        payload['reply_markup'] = json.dumps({
            'keyboard': keyboard,
            'resize_keyboard': True
        }, ensure_ascii=False)

    elif inline_keyboard:
        payload['reply_markup'] = json.dumps({
            'inline_keyboard': inline_keyboard
        }, ensure_ascii=False)

    data = urllib.parse.urlencode(payload).encode()
    req = urllib.request.Request(URL + 'sendMessage', data=data)
    try:
        with urllib.request.urlopen(req, context=context) as response:
            return response.read()
    except Exception as e:
        print("‚ùå –ü–û–ú–ò–õ–ö–ê –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", e)

# –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ inline callback
def answer_callback_query(callback_id, text):
    data = urllib.parse.urlencode({
        'callback_query_id': callback_id,
        'text': text,
        'show_alert': False
    }).encode()
    req = urllib.request.Request(URL + 'answerCallbackQuery', data=data)
    with urllib.request.urlopen(req, context=context) as response:
        return response.read()

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω—å
def get_updates(offset=None):
    try:
        url = URL + 'getUpdates'
        if offset:
            url += f'?offset={offset}'
        with urllib.request.urlopen(url, context=context) as response:
            return json.loads(response.read())
    except Exception as e:
        print("‚ùå –ü–û–ú–ò–õ–ö–ê –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω—å:", e)
        return {}

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
def main():
    offset = None
    data = load_data()
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")

    menu_keyboard = [["üé∞ –°–ø—ñ–Ω"], ["üë§ –ü—Ä–æ—Ñ—ñ–ª—å", "üõç –ú–∞–≥–∞–∑–∏–Ω"]]

    products = {
        'shop_1': {'name': '60 UC', 'price': 200},
        'shop_2': {'name': '360 UC', 'price': 1000},
        'shop_3': {'name': '660 UC', 'price': 2000},
        'shop_4': {'name': '1800 UC', 'price': 6000},
    }

    while True:
        updates = get_updates(offset)
        for update in updates.get("result", []):
            print("‚¨ÖÔ∏è –û—Ç—Ä–∏–º–∞–Ω–æ:", update)
            if "message" in update:
                message = update["message"]
                user = message.get("from", {})
                chat_id = message.get("chat", {}).get("id")
                user_id = str(user.get("id"))
                username = user.get("username") or user.get("first_name")
                text = message.get("text", "").strip().lower()

                if not chat_id or not text:
                    continue

                if user_id not in data:
                    data[user_id] = {
                        "username": username,
                        "points": 0,
                        "spins": 0,
                        "last_spin": 0
                    }

                if text in ["/start", "start"]:
                    send_message(chat_id, "üëã –ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –¥—ñ—é –∑ –º–µ–Ω—é:", keyboard=menu_keyboard)

                elif text in ["/spean", "—Å–ø—ñ–Ω", "üé∞ —Å–ø—ñ–Ω"]:
                    current_time = time.time()
                    last_spin = data[user_id].get("last_spin", 0)

                    if current_time - last_spin < 86400:
                        remaining = int((86400 - (current_time - last_spin)) // 3600)
                        send_message(chat_id, f"‚è≥ –í–∏ –≤–∂–µ –∫—Ä—É—Ç–∏–ª–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {remaining} –≥–æ–¥.")
                    else:
                        points = random.randint(-10, 10)
                        data[user_id]["points"] += points
                        data[user_id]["spins"] += 1
                        data[user_id]["last_spin"] = current_time
                        save_data(data)
                        send_message(chat_id, f"üé∞ –í–∏ –≤–∏–≥—Ä–∞–ª–∏ {points} –±–∞–ª—ñ–≤!")

                elif text in ["/profile", "–ø—Ä–æ—Ñ—ñ–ª—å", "üë§ –ø—Ä–æ—Ñ—ñ–ª—å"]:
                    u = data[user_id]
                    msg = f"üë§ {u['username']}\n–ë–∞–ª–∏: {u['points']}\n–°–ø—ñ–Ω–∏: {u['spins']}"
                    send_message(chat_id, msg)

                elif text in ["/shop", "–º–∞–≥–∞–∑–∏–Ω", "üõç –º–∞–≥–∞–∑–∏–Ω"]:
                    inline = [
                        [{"text": "1Ô∏è‚É£ 60 UC", "callback_data": "shop_1"}],
                        [{"text": "2Ô∏è‚É£ 360 UC", "callback_data": "shop_2"}],
                        [{"text": "3Ô∏è‚É£ 660 UC", "callback_data": "shop_3"}],
                        [{"text": "4Ô∏è‚É£ 1800 UC", "callback_data": "shop_4"}]
                    ]
                    send_message(chat_id, "üõç –í–∏–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä:", inline_keyboard=inline)

                elif text.startswith("/nah "):
                    target = message["text"].split("/nah ", 1)[1].strip()
                    if target.startswith("@"): send_message(chat_id, f"{target}, –Ω–∞—Ö")

                elif text.startswith("/ydar "):
                    target = message["text"].split("/ydar ", 1)[1].strip()
                    if target.startswith("@"): send_message(chat_id, f"{target}, –ø–æ–ª—É—á–∞–π —É–¥–∞—Ä ü•ä")

            elif "callback_query" in update:
                query = update["callback_query"]
                callback_data = query["data"]
                callback_id = query["id"]
                user = query["from"]
                chat_id = query["message"]["chat"]["id"]
                user_id = str(user["id"])
                username = user.get("username") or user.get("first_name")

                if callback_data in products:
                    product = products[callback_data]
                    if data[user_id]["points"] >= product["price"]:
                        data[user_id]["points"] -= product["price"]
                        save_data(data)

                        answer_callback_query(callback_id, f"‚úÖ –í–∏ –∫—É–ø–∏–ª–∏ {product['name']}")
                        send_message(chat_id, f"üéÅ –í–∏ –∫—É–ø–∏–ª–∏ {product['name']} –∑–∞ {product['price']} –±–∞–ª—ñ–≤!")
                        send_message(ADMIN_ID, f"üõí {username} –∫—É–ø–∏–≤ {product['name']}")
                    else:
                        answer_callback_query(callback_id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –±–∞–ª—ñ–≤")

            offset = update["update_id"] + 1
        time.sleep(1)

if __name__ == "__main__":
    main()
